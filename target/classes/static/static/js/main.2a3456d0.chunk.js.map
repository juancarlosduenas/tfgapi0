{"version":3,"sources":["AppNavbar.js","Home.js","TFGList.js","TFGEdit.js","App.js","reportWebVitals.js","index.js"],"names":["AppNavbar","props","state","isOpen","toggle","bind","this","setState","Navbar","color","dark","expand","NavbarBrand","tag","Link","to","Component","Home","Container","fluid","Button","TFGList","tfgs","remove","fetch","then","response","json","data","email","method","headers","updatedTFGs","filter","i","tfgList","map","tfg","style","whiteSpace","nombre","titulo","tutor","status","ButtonGroup","size","onClick","className","Table","width","TFGEdit","emptyItem","pass","memoria","nota","item","handleChange","handleSubmit","match","params","event","target","value","name","preventDefault","body","JSON","stringify","history","push","title","Form","onSubmit","FormGroup","Label","for","Input","type","id","onChange","autoComplete","withRouter","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a3456d0.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Navbar, NavbarBrand} from 'reactstrap';\nimport {Link} from 'react-router-dom';\n\nexport default class AppNavbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {isOpen: false};\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        return <Navbar color=\"dark\" dark expand=\"md\">\n            <NavbarBrand tag={Link} to=\"/\">Home</NavbarBrand>\n        </Navbar>;\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport AppNavbar from './AppNavbar';\nimport { Link } from 'react-router-dom';\nimport { Button, Container } from 'reactstrap';\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                <AppNavbar/>\n                <Container fluid>\n                    <Button color=\"link\"><Link to=\"/tfgs\">TFGs</Link></Button>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { Link } from 'react-router-dom';\n\nclass TFGList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {tfgs: []};\n        this.remove = this.remove.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('/tfgs')\n            .then(response => response.json())\n            .then(data => this.setState({tfgs: data}));\n    }\n\n    async remove(email) {\n        await fetch(`/tfgs/${email}`, {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then(() => {\n            let updatedTFGs = [...this.state.tfgs].filter(i => i.email !== email);\n            this.setState({tfgs: updatedTFGs});\n        });\n    }\n\n    render() {\n        const {tfgs} = this.state;\n\n        const tfgList = tfgs.map(tfg => {\n            return <tr key={tfg.email}>\n                <td style={{whiteSpace: 'nowrap'}}>{tfg.nombre}</td>\n                <td>{tfg.email}</td>\n                <td>{tfg.titulo}</td>\n                <td>{tfg.tutor}</td>\n                <td>{tfg.status}</td>\n                <td>\n                    <ButtonGroup>\n                        <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/tfgs/\" + tfg.email}>Edit</Button>\n                        <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(tfg.email)}>Delete</Button>\n                    </ButtonGroup>\n                </td>\n            </tr>\n        });\n\n        return (\n            <div>\n                <AppNavbar/>\n                <Container fluid>\n                    <div className=\"float-right\">\n                        <Button color=\"success\" tag={Link} to=\"/tfgs/new\">Add TFG</Button>\n                    </div>\n                    <h3>TFGs</h3>\n                    <Table className=\"mt-4\">\n                        <thead>\n                        <tr>\n                            <th width=\"15%\">Nombre</th>\n                            <th width=\"15%\">Email</th>\n                            <th width=\"15%\">Titulo</th>\n                            <th width=\"15%\">Tutor</th>\n                            <th width=\"10%\">Estado</th>\n                            <th width=\"30%\">Actions</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {tfgList}\n                        </tbody>\n                    </Table>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default TFGList;","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\n\nclass TFGEdit extends Component {\n\n    emptyItem = {\n        nombre: '',\n        email: '',\n        titulo: '',\n        tutor: '',\n        pass: '',\n        status: 1,\n        memoria: null,\n        nota: 0\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            item: this.emptyItem\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    async componentDidMount() {\n        if (this.props.match.params.email !== 'new') { // \n            const tfg = await (await fetch(`/tfgs/${this.props.match.params.email}`)).json();\n            this.setState({item: tfg});\n        }\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        let item = {...this.state.item};\n        item[name] = value;\n        this.setState({item});\n    }\n\nasync handleSubmit(event) {\n    event.preventDefault();\n    const {item} = this.state;\n\n    await fetch('/tfgs' + ((this.props.match.params.email !== 'new') ? '/' + item.email : ''), {\n        method: (this.props.match.params.email !== 'new') ? 'PUT' : 'POST', //(item.email) ? 'PUT' : 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(item),\n    });\n    this.props.history.push('/tfgs');\n}\n\n    render() {\n        const {item} = this.state;\n        const title = <h2>{item.email ? 'Edit TFG' : 'Add TFG'}</h2>;\n\n        return <div>\n            <AppNavbar/>\n            <Container>\n                {title}\n                <Form onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                        <Label for=\"nombre\">Nombre</Label>\n                        <Input type=\"text\" name=\"nombre\" id=\"nombre\" value={item.nombre || ''}\n                               onChange={this.handleChange} autoComplete=\"nombre\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"email\">Email</Label>\n                        <Input type=\"text\" name=\"email\" id=\"email\" value={item.email || ''}\n                               onChange={this.handleChange} autoComplete=\"email\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"titulo\">Titulo</Label>\n                        <Input type=\"text\" name=\"titulo\" id=\"titulo\" value={item.titulo || ''}\n                               onChange={this.handleChange} autoComplete=\"titulo\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"tutor\">Tutor</Label>\n                        <Input type=\"text\" name=\"tutor\" id=\"tutor\" value={item.tutor || ''}\n                               onChange={this.handleChange} autoComplete=\"tutor\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"status\">Status</Label>\n                        <Input type=\"number\" name=\"status\" id=\"status\" value={item.status || ''}\n                               onChange={this.handleChange} autoComplete=\"status\"/>\n                    </FormGroup>\n\n                    <FormGroup>\n                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\n                        <Button color=\"secondary\" tag={Link} to=\"/tfgs\">Cancel</Button>\n                    </FormGroup>\n                </Form>\n            </Container>\n        </div>\n    }\n}\n\nexport default withRouter(TFGEdit);","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Home';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport TFGList from './TFGList';\nimport TFGEdit from \"./TFGEdit\";\n\nclass App extends Component {\n  render() {\n    return (\n        <Router>\n          <Switch>\n            <Route path='/' exact={true} component={Home}/>\n            <Route path='/tfgs' exact={true} component={TFGList}/>\n            <Route path='/tfgs/:email' component={TFGEdit}/>\n          </Switch>\n        </Router>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}